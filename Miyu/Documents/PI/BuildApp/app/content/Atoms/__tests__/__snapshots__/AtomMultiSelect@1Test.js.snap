// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AtomMultiSelect should not attempt to render a legacy article 1`] = `
<View>
  <Text
    family="archer"
    size="larger"
    style={
      Object {
        "padding": 8,
        "paddingTop": 48,
      }
    }
    weight="bold"
  >
    Label
  </Text>
  <ListView
    dataSource={
      Object {
        "_data": Array [
          1,
        ],
        "getRowCount": [Function],
      }
    }
    horizontal={undefined}
    renderRow={[Function]}
    renderSeparator={[Function]}
    showsHorizontalScrollIndicator={false}
    style={Object {}}
  />
</View>
`;

exports[`AtomMultiSelect should not crash when given currently unused include types 1`] = `
<View>
  <View>
    <Text
      family="archer"
      size="larger"
      style={
        Object {
          "padding": 8,
          "paddingTop": 48,
        }
      }
      weight="bold"
    >
      Label
    </Text>
    <ListView
      dataSource={
        Object {
          "_data": Array [
            0,
          ],
          "getRowCount": [Function],
        }
      }
      horizontal={undefined}
      renderRow={[Function]}
      renderSeparator={[Function]}
      showsHorizontalScrollIndicator={false}
      style={Object {}}
    />
  </View>
  <View>
    <Text
      family="archer"
      size="larger"
      style={
        Object {
          "padding": 8,
          "paddingTop": 48,
        }
      }
      weight="bold"
    >
      Label
    </Text>
    <ListView
      dataSource={
        Object {
          "_data": Array [
            0,
          ],
          "getRowCount": [Function],
        }
      }
      horizontal={undefined}
      renderRow={[Function]}
      renderSeparator={[Function]}
      showsHorizontalScrollIndicator={false}
      style={Object {}}
    />
  </View>
  <View>
    <Text
      family="archer"
      size="larger"
      style={
        Object {
          "padding": 8,
          "paddingTop": 48,
        }
      }
      weight="bold"
    >
      Label
    </Text>
    <ListView
      dataSource={
        Object {
          "_data": Array [
            0,
          ],
          "getRowCount": [Function],
        }
      }
      horizontal={undefined}
      renderRow={[Function]}
      renderSeparator={[Function]}
      showsHorizontalScrollIndicator={false}
      style={Object {}}
    />
  </View>
  <View>
    <Text
      family="archer"
      size="larger"
      style={
        Object {
          "padding": 8,
          "paddingTop": 48,
        }
      }
      weight="bold"
    >
      Label
    </Text>
    <ListView
      dataSource={
        Object {
          "_data": Array [
            0,
          ],
          "getRowCount": [Function],
        }
      }
      horizontal={undefined}
      renderRow={[Function]}
      renderSeparator={[Function]}
      showsHorizontalScrollIndicator={false}
      style={Object {}}
    />
  </View>
</View>
`;

exports[`AtomMultiSelect should render correctly 1`] = `null`;

exports[`AtomMultiSelect should render with a category 1`] = `
<View>
  <Text
    family="archer"
    size="larger"
    style={
      Object {
        "padding": 8,
        "paddingTop": 48,
      }
    }
    weight="bold"
  >
    Label
  </Text>
  <ListView
    dataSource={
      Object {
        "_data": Array [
          Object {
            "categoryId": 0,
            "storeId": 248,
          },
        ],
        "getRowCount": [Function],
      }
    }
    horizontal={undefined}
    renderRow={[Function]}
    renderSeparator={[Function]}
    showsHorizontalScrollIndicator={false}
    style={Object {}}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel=""
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          undefined,
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#FFFFFF",
            "flexDirection": "row",
            "padding": 7,
          }
        }
      >
        <Image
          resizeMode="contain"
          source={
            Object {
              "uri": "https://s3.img-b.com/image/upload/t_base,f_auto,dpr_2.0,c_lpad,w_42,h_42/404images/noimage.gif",
            }
          }
          style={
            Object {
              "height": 42,
              "marginRight": 16,
              "width": 42,
            }
          }
        />
        <View
          style={
            Object {
              "flex": 1,
              "marginRight": 8,
            }
          }
        >
          <View
            style={
              Object {
                "flexDirection": "row",
              }
            }
          />
        </View>
        <Icon
          color="#acabab"
          name="ios-arrow-forward"
          size={25}
          style={undefined}
        />
      </View>
    </View>
  </ListView>
</View>
`;

exports[`AtomMultiSelect should render with a product 1`] = `
<View>
  <Text
    family="archer"
    size="larger"
    style={
      Object {
        "padding": 8,
        "paddingTop": 48,
      }
    }
    weight="bold"
  >
    Label
  </Text>
  <ListView
    dataSource={
      Object {
        "_data": Array [
          0,
        ],
        "getRowCount": [Function],
      }
    }
    horizontal={undefined}
    renderRow={[Function]}
    renderSeparator={[Function]}
    showsHorizontalScrollIndicator={false}
    style={Object {}}
  >
    <TouchableOpacity
      onPress={[Function]}
      trackAction="build:app:article:relatedproducttap"
      trackContenxtData={
        Object {
          "compositeId": undefined,
          "uniqueId": undefined,
        }
      }
    >
      <Image
        height={100}
        resizeMode="contain"
        source="https://s3.img-b.com/image/upload/t_base,f_auto,dpr_2.0,c_lpad,w_100,h_100/404images/noimage.gif"
        width={100}
      />
      <Text
        color="primary"
        weight="bold"
      />
    </TouchableOpacity>
  </ListView>
</View>
`;

exports[`AtomMultiSelect should render with a video 1`] = `
<View>
  <Text
    family="archer"
    size="larger"
    style={
      Object {
        "padding": 8,
        "paddingTop": 48,
      }
    }
    weight="bold"
  >
    Label
  </Text>
  <ListView
    dataSource={
      Object {
        "_data": Array [
          0,
        ],
        "getRowCount": [Function],
      }
    }
    horizontal={undefined}
    renderRow={[Function]}
    renderSeparator={[Function]}
    showsHorizontalScrollIndicator={false}
    style={Object {}}
  >
    <View
      style={
        Object {
          "backgroundColor": "#FFFFFF",
          "elevation": 3,
          "marginBottom": 8,
          "marginHorizontal": 8,
          "shadowColor": "black",
          "shadowOffset": Object {
            "height": 2,
            "width": 0,
          },
          "shadowOpacity": 0.3,
          "shadowRadius": 3,
        }
      }
    >
      <View>
        <Text>
          Could not load video.
        </Text>
      </View>
      <Text
        style={
          Object {
            "padding": 8,
          }
        }
      />
    </View>
  </ListView>
</View>
`;

exports[`AtomMultiSelect should render with an article 1`] = `
<View>
  <Text
    family="archer"
    size="larger"
    style={
      Object {
        "padding": 8,
        "paddingTop": 48,
      }
    }
    weight="bold"
  >
    Label
  </Text>
  <ListView
    dataSource={
      Object {
        "_data": Array [
          0,
        ],
        "getRowCount": [Function],
      }
    }
    horizontal={undefined}
    renderRow={[Function]}
    renderSeparator={[Function]}
    showsHorizontalScrollIndicator={false}
    style={Object {}}
  >
    <TouchableOpacity
      onPress={[Function]}
      style={
        Object {
          "backgroundColor": "#FFFFFF",
          "elevation": 3,
          "marginBottom": 8,
          "marginHorizontal": 8,
          "shadowColor": "black",
          "shadowOffset": Object {
            "height": 2,
            "width": 0,
          },
          "shadowOpacity": 0.3,
          "shadowRadius": 3,
        }
      }
      trackAction="build:app:articlestab:articlepreviewtap"
    >
      <View
        style={
          Object {
            "padding": 8,
          }
        }
      >
        <Text
          color="primary"
        >
          Read Article
        </Text>
      </View>
    </TouchableOpacity>
  </ListView>
</View>
`;
