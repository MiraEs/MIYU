// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CustomerImpersonator component should render correctly with no impersonatorId 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "#FFFFFF",
        "flex": 1,
      },
      Object {
        "alignItems": "center",
      },
    ]
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "margin": 8,
      }
    }
  >
    <Text
      stlye={
        Object {
          "alignItems": "center",
          "margin": 8,
        }
      }
    >
      You need to log out first.
    </Text>
    <Button
      accessibilityLabel="Customer Impersonator Logout"
      color="white"
      onPress={[Function]}
      style={
        Object {
          "flex": 0,
          "margin": 8,
          "width": 200,
        }
      }
      text="Logout"
      textColor="secondary"
      trackAction="build:app:customerimpersonator:logout"
    />
  </View>
</View>
`;

exports[`CustomerImpersonator component should render correctly with user logged in 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "#FFFFFF",
        "flex": 1,
      },
      Object {
        "alignItems": "center",
      },
    ]
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "margin": 8,
      }
    }
  >
    <Text
      stlye={
        Object {
          "alignItems": "center",
          "margin": 8,
        }
      }
    >
      Impersonating
      <Text
        weight="bold"
      >
         
        Bob
         
        Smith
      </Text>
      .
    </Text>
    <Button
      accessibilityLabel="Customer Impersonator Logout"
      color="white"
      onPress={[Function]}
      style={
        Object {
          "flex": 0,
          "margin": 8,
          "width": 200,
        }
      }
      text="Logout"
      textColor="secondary"
      trackAction="build:app:customerimpersonator:logout"
    />
  </View>
</View>
`;

exports[`CustomerImpersonator component should render correctly with user logged out 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "#FFFFFF",
        "flex": 1,
      },
      Object {
        "alignItems": "center",
      },
    ]
  }
>
  <Form
    onChange={[Function]}
    style={
      Object {
        "flex": 0,
        "width": 200,
      }
    }
  >
    <FormInput
      accessibilityLabel="Customer Id Input"
      label="Customer ID"
      name="customerId"
    />
    <FormInput
      accessibilityLabel="Impersonator Password Input"
      autoCapitalize="none"
      label="Admin Password"
      name="inputPassword"
    />
    <Button
      accessibilityLabel="Customer Impersonator Login"
      color="primary"
      isLoading={false}
      onPress={[Function]}
      text="Impersonate"
      trackAction="build:app:customerimpersonator:login"
    />
    <Text
      color="error"
    />
  </Form>
</View>
`;

exports[`CustomerImpersonator functions renderPasswordInput should render correctly with a password field 1`] = `undefined`;

exports[`CustomerImpersonator functions renderPasswordInput should render correctly without a password field 1`] = `
<FormInput
  accessibilityLabel="Impersonator Password Input"
  autoCapitalize="none"
  label="Admin Password"
  name="inputPassword"
/>
`;
