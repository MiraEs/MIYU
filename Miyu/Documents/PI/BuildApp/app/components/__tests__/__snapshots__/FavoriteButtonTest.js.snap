// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FavoriteButton component should render FavoriteButton if isLoggedIn prop set to false 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hitSlop={
    Object {
      "bottom": 14,
      "left": 14,
      "right": 14,
      "top": 14,
    }
  }
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignSelf": "flex-end",
      "backgroundColor": "rgba(0,0,0,0)",
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Image
    resizeMode="contain"
    source={1}
    style={
      Object {
        "height": 27,
        "width": 27,
      }
    }
  />
</View>
`;

exports[`FavoriteButton component should render FavoriteButton with navBarButton prop true 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hitSlop={
    Object {
      "bottom": 14,
      "left": 14,
      "right": 14,
      "top": 14,
    }
  }
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignSelf": "flex-end",
      "backgroundColor": "rgba(0,0,0,0)",
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Icon
    color="#FFFFFF"
    name="md-heart"
    size={27}
  />
</View>
`;

exports[`FavoriteButton component should render FavoriteButton with required props 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hitSlop={
    Object {
      "bottom": 14,
      "left": 14,
      "right": 14,
      "top": 14,
    }
  }
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignSelf": "flex-end",
      "backgroundColor": "rgba(0,0,0,0)",
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Image
    resizeMode="contain"
    source={1}
    style={
      Object {
        "height": 27,
        "width": 27,
      }
    }
  />
</View>
`;

exports[`FavoriteButton component should render FavoriteButton with style prop 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hitSlop={
    Object {
      "bottom": 14,
      "left": 14,
      "right": 14,
      "top": 14,
    }
  }
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignSelf": "flex-end",
      "backgroundColor": "rgba(0,0,0,0)",
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Image
    resizeMode="contain"
    source={1}
    style={
      Object {
        "height": 27,
        "width": 27,
      }
    }
  />
</View>
`;
