{
  "_args": [
    [
      {
        "raw": "redux-actions@~0.13.0",
        "scope": null,
        "escapedName": "redux-actions",
        "name": "redux-actions",
        "rawSpec": "~0.13.0",
        "spec": ">=0.13.0 <0.14.0",
        "type": "range"
      },
      "/Users/ilmiraestil/Documents/BuildApp"
    ]
  ],
  "_from": "redux-actions@>=0.13.0 <0.14.0",
  "_id": "redux-actions@0.13.0",
  "_inCache": true,
  "_location": "/redux-actions",
  "_nodeVersion": "6.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/redux-actions-0.13.0.tgz_1477858947594_0.7963932536076754"
  },
  "_npmUser": {
    "name": "yangmillstheory",
    "email": "v.alvarez312@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-actions@~0.13.0",
    "scope": null,
    "escapedName": "redux-actions",
    "name": "redux-actions",
    "rawSpec": "~0.13.0",
    "spec": ">=0.13.0 <0.14.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-actions/-/redux-actions-0.13.0.tgz",
  "_shasum": "34bf77c5698e86d86b0edb533ea23a1c0658f4fe",
  "_shrinkwrap": null,
  "_spec": "redux-actions@~0.13.0",
  "_where": "/Users/ilmiraestil/Documents/BuildApp",
  "author": {
    "name": "Andrew Clark",
    "email": "acdlite@me.com"
  },
  "bugs": {
    "url": "https://github.com/acdlite/redux-actions/issues"
  },
  "dependencies": {
    "lodash": "^4.13.1",
    "reduce-reducers": "^0.1.0"
  },
  "description": "Flux Standard Action utlities for Redux",
  "devDependencies": {
    "babel-cli": "^6.7.7",
    "babel-core": "^6.7.7",
    "babel-eslint": "^6.1.1",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.7.2",
    "chai": "^3.0.0",
    "cross-env": "^2.0.0",
    "eslint": "^2.8.0",
    "eslint-config-airbnb-base": "^1.0.3",
    "eslint-plugin-import": "^1.5.0",
    "eslint-watch": "^2.1.13",
    "flux-standard-action": "^0.6.0",
    "mocha": "^2.2.5",
    "rimraf": "^2.5.3",
    "webpack": "^1.13.1"
  },
  "directories": {},
  "dist": {
    "shasum": "34bf77c5698e86d86b0edb533ea23a1c0658f4fe",
    "tarball": "https://registry.npmjs.org/redux-actions/-/redux-actions-0.13.0.tgz"
  },
  "files": [
    "lib",
    "dist"
  ],
  "gitHead": "4b6a9805f76063f6c8e93f864ad74279c55874a6",
  "homepage": "https://github.com/acdlite/redux-actions",
  "keywords": [
    "flux",
    "redux",
    "fsa",
    "actions"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "acdlite",
      "email": "acdlite@me.com"
    },
    {
      "name": "timche",
      "email": "tim@cheung.io"
    },
    {
      "name": "yangmillstheory",
      "email": "v.alvarez312@gmail.com"
    }
  ],
  "name": "redux-actions",
  "optionalDependencies": {},
  "readme": "# redux-actions\n\n[![build status](https://img.shields.io/travis/acdlite/redux-actions/master.svg?style=flat-square)](https://travis-ci.org/acdlite/redux-actions)\n\n[![NPM](https://nodei.co/npm/redux-actions.png?downloads=true)](https://nodei.co/npm/redux-actions/)\n\n[Flux Standard Action](https://github.com/acdlite/flux-standard-action) utilities for Redux.\n\n## Installation\n\n```bash\nnpm install --save redux-actions\n```\n\nIf you don’t use [npm](https://www.npmjs.com), you may grab the latest [UMD](https://unpkg.com/redux-actions@latest/dist) build from [unpkg](https://unpkg.com) (either a [development](https://unpkg.com/redux-actions@latest/dist/redux-actions.js) or a [production](https://unpkg.com/redux-actions@latest/dist/redux-actions.min.js) build). The UMD build exports a global called `window.ReduxActions` if you add it to your page via a `<script>` tag. We *don’t* recommend UMD builds for any serious application, as most of the libraries complementary to Redux are only available on [npm](https://www.npmjs.com/search?q=redux).\n\n## Usage\n\n### `createAction(type, payloadCreator = Identity, ?metaCreator)`\n\n```js\nimport { createAction } from 'redux-actions';\n```\n\nWraps an action creator so that its return value is the payload of a Flux Standard Action. If no payload creator is passed, or if it's not a function, the identity function is used.\n\nExample:\n\n```js\nlet increment = createAction('INCREMENT', amount => amount);\n// same as\nincrement = createAction('INCREMENT');\n\nexpect(increment(42)).to.deep.equal({\n  type: 'INCREMENT',\n  payload: 42\n});\n```\n\nIf the payload is an instance of an [Error\nobject](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error),\nredux-actions will automatically set ```action.error``` to true.\n\nExample:\n\n```js\nconst increment = createAction('INCREMENT');\n\nconst error = new TypeError('not a number');\nexpect(increment(error)).to.deep.equal({\n  type: 'INCREMENT',\n  payload: error,\n  error: true\n});\n```\n\n`createAction` also returns its `type` when used as type in `handleAction` or `handleActions`.\n\nExample:\n\n```js\nconst increment = createAction('INCREMENT');\n\n// As parameter in handleAction:\nhandleAction(increment, {\n  next(state, action) {...},\n  throw(state, action) {...}\n});\n\n// As object key in handleActions:\nconst reducer = handleActions({\n  [increment]: (state, action) => ({\n    counter: state.counter + action.payload\n  })\n}, { counter: 0 });\n```\n\n**NOTE:** The more correct name for this function is probably `createActionCreator()`, but that seems a bit redundant.\n\nUse the identity form to create one-off actions:\n\n```js\ncreateAction('ADD_TODO')('Use Redux');\n```\n\n`metaCreator` is an optional function that creates metadata for the payload. It receives the same arguments as the payload creator, but its result becomes the meta field of the resulting action. If `metaCreator` is undefined or not a function, the meta field is omitted.\n\n### `createActions(?actionsMap, ?...identityActions)`\n\n```js\nimport { createActions } from 'redux-actions';\n```\n\nReturns an object mapping action types to action creators. The keys of this object are camel-cased from the keys in `actionsMap` and the string literals of `identityActions`; the values are the action creators.\n\n`actionsMap` is an optional object with action types as keys, and whose values **must** be either\n\n- a function, which is the payload creator for that action\n- an array with `payload` and `meta` functions in that order, as in [`createAction`](#createactiontype-payloadcreator--identity-metacreator)\n    - `meta` is **required** in this case (otherwise use the function form above)\n\n`identityActions` is an optional list of positional string arguments that are action type strings; these action types will use the identity payload creator.\n\n```js\nconst { actionOne, actionTwo, actionThree } = createActions({\n  // function form; payload creator defined inline\n  ACTION_ONE: (key, value) => ({ [key]: value }),\n\n  // array form\n  ACTION_TWO: [\n    (first) => first,               // payload\n    (first, second) => ({ second }) // meta\n  ],\n\n  // trailing action type string form; payload creator is the identity\n}, 'ACTION_THREE');\n\nexpect(actionOne('key', 1)).to.deep.equal({\n  type: 'ACTION_ONE',\n  payload: { key: 1 }\n});\n\nexpect(actionTwo('first', 'second')).to.deep.equal({\n  type: 'ACTION_TWO',\n  payload: ['first'],\n  meta: { second: 'second' }\n});\n\nexpect(actionThree(3)).to.deep.equal({\n  type: 'ACTION_THREE',\n  payload: 3,\n});\n```\n\n### `handleAction(type, reducer | reducerMap, ?defaultState)`\n\n```js\nimport { handleAction } from 'redux-actions';\n```\n\nWraps a reducer so that it only handles Flux Standard Actions of a certain type.\n\nIf a single reducer is passed, it is used to handle both normal actions and failed actions. (A failed action is analogous to a rejected promise.) You can use this form if you know a certain type of action will never fail, like the increment example above.\n\nOtherwise, you can specify separate reducers for `next()` and `throw()`. This API is inspired by the ES6 generator interface.\n\n```js\nhandleAction('FETCH_DATA', {\n  next(state, action) {...},\n  throw(state, action) {...}\n});\n```\n\nIf either `next()` or `throw()` are `undefined` or `null`, then the identity function is used for that reducer.\n\nThe optional third parameter specifies a default or initial state, which is used when `undefined` is passed to the reducer.\n\n### `handleActions(reducerMap, ?defaultState)`\n\n```js\nimport { handleActions } from 'redux-actions';\n```\n\nCreates multiple reducers using `handleAction()` and combines them into a single reducer that handles multiple actions. Accepts a map where the keys are passed as the first parameter to `handleAction()` (the action type), and the values are passed as the second parameter (either a reducer or reducer map).\n\nThe optional second parameter specifies a default or initial state, which is used when `undefined` is passed to the reducer.\n\n(Internally, `handleActions()` works by applying multiple reducers in sequence using [reduce-reducers](https://github.com/acdlite/reduce-reducers).)\n\nExample:\n\n```js\nconst reducer = handleActions({\n  INCREMENT: (state, action) => ({\n    counter: state.counter + action.payload\n  }),\n\n  DECREMENT: (state, action) => ({\n    counter: state.counter - action.payload\n  })\n}, { counter: 0 });\n```\n\n### `combineActions(...actionTypes)`\n\nCombine any number of action types or action creators. `actionTypes` is a list of positional arguments which can be action type strings, symbols, or action creators.\n\nThis allows you to reduce multiple distinct actions with the same reducer.\n\n```js\nconst { increment, decrement } = createActions({\n  INCREMENT: amount => ({ amount }),\n  DECREMENT: amount => ({ amount: -amount }),\n})\n\nconst reducer = handleAction(combineActions(increment, decrement), {\n  next: (state, { payload: { amount } }) => ({ ...state, counter: state.counter + amount }),\n  throw: state => ({ ...state, counter: 0 }),\n}, { counter: 10 })\n\nexpect(reducer(undefined, increment(1)).to.deep.equal({ counter: 11 })\nexpect(reducer(undefined, decrement(1)).to.deep.equal({ counter: 9 })\nexpect(reducer(undefined, increment(new Error)).to.deep.equal({ counter: 0 })\nexpect(reducer(undefined, decrement(new Error)).to.deep.equal({ counter: 0 })\n```\n\n## Usage with middleware\n\nredux-actions is handy all by itself, however, its real power comes when you combine it with middleware.\n\nThe identity form of `createAction` is a great way to create a single action creator that handles multiple payload types. For example, using [redux-promise](https://github.com/acdlite/redux-promise) and [redux-rx](https://github.com/acdlite/redux-rx):\n\n```js\nconst addTodo = createAction('ADD_TODO');\n\n// A single reducer...\nhandleAction('ADD_TODO', (state = { todos: [] }, action) => ({\n  ...state,\n  todos: [...state.todos, action.payload]\n}));\n\n// ...that works with all of these forms:\n// (Don't forget to use `bindActionCreators()` or equivalent.\n// I've left that bit out)\naddTodo('Use Redux')\naddTodo(Promise.resolve('Weep with joy'));\naddTodo(Observable.of(\n  'Learn about middleware',\n  'Learn about higher-order stores'\n)).subscribe();\n```\n\n## See also\n\nUse redux-actions in combination with FSA-compliant libraries.\n\n- [redux-promise](https://github.com/acdlite/redux-promise) - Promise middleware\n- [redux-rx](https://github.com/acdlite/redux-rx) - Includes observable middleware.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/acdlite/redux-actions.git"
  },
  "scripts": {
    "build": "npm run clean && npm run build:commonjs && npm run build:umd && npm run build:umd:min",
    "build:commonjs": "babel src --out-dir lib --ignore *-test.js",
    "build:umd": "cross-env NODE_ENV=development webpack",
    "build:umd:min": "cross-env NODE_ENV=production webpack",
    "clean": "rimraf lib",
    "lint": "esw src webpack.config --color",
    "lint:fix": "npm run lint -- --fix",
    "lint:watch": "npm run lint -- --watch",
    "prepublish": "npm run lint && npm run test && npm run build",
    "test": "mocha --compilers js:babel-register src/**/*-test.js",
    "test:watch": "npm run test -- --watch src/**/*-test.js"
  },
  "version": "0.13.0"
}
