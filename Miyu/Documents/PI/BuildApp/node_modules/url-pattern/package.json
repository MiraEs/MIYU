{
  "_args": [
    [
      {
        "raw": "url-pattern@1.0.3",
        "scope": null,
        "escapedName": "url-pattern",
        "name": "url-pattern",
        "rawSpec": "1.0.3",
        "spec": "1.0.3",
        "type": "version"
      },
      "/Users/ilmiraestil/Documents/BuildApp"
    ]
  ],
  "_from": "url-pattern@1.0.3",
  "_id": "url-pattern@1.0.3",
  "_inCache": true,
  "_location": "/url-pattern",
  "_nodeVersion": "5.7.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/url-pattern-1.0.3.tgz_1479395515849_0.921505456790328"
  },
  "_npmUser": {
    "name": "snd",
    "email": "kruemaxi@googlemail.com"
  },
  "_npmVersion": "3.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "url-pattern@1.0.3",
    "scope": null,
    "escapedName": "url-pattern",
    "name": "url-pattern",
    "rawSpec": "1.0.3",
    "spec": "1.0.3",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/url-pattern/-/url-pattern-1.0.3.tgz",
  "_shasum": "0409292471b24f23c50d65a47931793d2b5acfc1",
  "_shrinkwrap": null,
  "_spec": "url-pattern@1.0.3",
  "_where": "/Users/ilmiraestil/Documents/BuildApp",
  "author": {
    "name": "Maximilian KrÃ¼ger",
    "email": "kruemaxi@gmail.com",
    "url": "http://github.com/snd"
  },
  "bugs": {
    "url": "http://github.com/snd/url-pattern/issues",
    "email": "kruemaxi@gmail.com"
  },
  "contributors": [
    {
      "name": "Andrey Popp",
      "email": "8mayday@gmail.com",
      "url": "https://github.com/andreypopp"
    },
    {
      "name": "Samuel Reed",
      "url": "https://github.com/STRML"
    },
    {
      "name": "Michael Trotter",
      "url": "https://github.com/spicydonuts"
    },
    {
      "name": "Kate Hudson",
      "url": "https://github.com/k88hudson"
    },
    {
      "name": "caasi Huang",
      "url": "https://github.com/caasi"
    }
  ],
  "dependencies": {},
  "description": "easier than regex string matching patterns for urls and other strings. turn strings into data or data into strings.",
  "devDependencies": {
    "codecov.io": "0.1.6",
    "coffee-script": "1.10.0",
    "coffeeify": "2.0.1",
    "coffeetape": "1.0.1",
    "istanbul": "0.4.1",
    "tape": "4.2.2",
    "zuul": "3.8.0"
  },
  "directories": {},
  "dist": {
    "shasum": "0409292471b24f23c50d65a47931793d2b5acfc1",
    "tarball": "https://registry.npmjs.org/url-pattern/-/url-pattern-1.0.3.tgz"
  },
  "engines": {
    "node": ">=0.12.0"
  },
  "gitHead": "195d77082e438bcacaf095ecb812d80eeac456ae",
  "homepage": "http://github.com/snd/url-pattern",
  "keywords": [
    "url",
    "string",
    "matching",
    "pattern",
    "matching",
    "routing",
    "route",
    "regex",
    "match",
    "segment",
    "parsing",
    "parser",
    "parse",
    "combinator",
    "combinators",
    "custom",
    "customizable",
    "filepath",
    "path",
    "domain",
    "separator",
    "stringify",
    "generate",
    "text",
    "processing"
  ],
  "license": "MIT",
  "main": "lib/url-pattern",
  "maintainers": [
    {
      "name": "snd",
      "email": "kruemaxi@googlemail.com"
    }
  ],
  "name": "url-pattern",
  "optionalDependencies": {},
  "readme": "# url-pattern\n\n[![NPM Package](https://img.shields.io/npm/v/url-pattern.svg?style=flat)](https://www.npmjs.org/package/url-pattern)\n[![Build Status](https://travis-ci.org/snd/url-pattern.svg?branch=master)](https://travis-ci.org/snd/url-pattern/branches)\n[![Sauce Test Status](https://saucelabs.com/buildstatus/urlpattern)](https://saucelabs.com/u/urlpattern)\n[![codecov.io](http://codecov.io/github/snd/url-pattern/coverage.svg?branch=master)](http://codecov.io/github/snd/url-pattern?branch=master)\n[![Downloads per Month](https://img.shields.io/npm/dm/url-pattern.svg?style=flat)](https://www.npmjs.org/package/url-pattern)\n\n**easier than regex string matching patterns for urls and other strings.  \nturn strings into data or data into strings.**\n\n> This is a great little library -- thanks!  \n> [michael](https://github.com/snd/url-pattern/pull/7)\n\n[make pattern:](#make-pattern-from-string)\n``` javascript\nvar pattern = new UrlPattern('/api/users(/:id)');\n```\n\n[match pattern against string and extract values:](#match-pattern-against-string)\n``` javascript\npattern.match('/api/users/10'); // {id: '10'}\npattern.match('/api/users'); // {}\npattern.match('/api/products/5'); // null\n```\n\n[generate string from pattern and values:](#stringify-patterns)\n``` javascript\npattern.stringify() // '/api/users'\npattern.stringify({id: 20}) // '/api/users/20'\n```\n\n- continuously tested in Node.js (0.12, 4.2.3 and 5.3) and all relevant browsers:\n  [![Sauce Test Status](https://saucelabs.com/browser-matrix/urlpattern.svg)](https://saucelabs.com/u/urlpattern)\n- [tiny single file with just under 500 lines of simple, readable, maintainable code](src/url-pattern.coffee)\n- [huge test suite](test)\n  passing [![Build Status](https://travis-ci.org/snd/url-pattern.svg?branch=master)](https://travis-ci.org/snd/url-pattern/branches)\n  with [![codecov.io](http://codecov.io/github/snd/url-pattern/coverage.svg?branch=master)](http://codecov.io/github/snd/url-pattern?branch=master)\n  code coverage\n- widely used [![Downloads per Month](https://img.shields.io/npm/dm/url-pattern.svg?style=flat)](https://www.npmjs.org/package/url-pattern)\n- supports CommonJS, [AMD](http://requirejs.org/docs/whyamd.html) and browser globals\n  - `require('url-pattern')`\n  - use [lib/url-pattern.js](lib/url-pattern.js) in the browser\n  - sets the global variable `UrlPattern` when neither CommonJS nor [AMD](http://requirejs.org/docs/whyamd.html) are available.\n- very fast matching as each pattern is compiled into a regex exactly once\n- zero dependencies\n- [customizable](#customize-the-pattern-syntax)\n- [frequently asked questions](#frequently-asked-questions)\n- npm package: `npm install url-pattern`\n- bower package: `bower install url-pattern`\n- pattern parser implemented using simple, combosable, testable [parser combinators](https://en.wikipedia.org/wiki/Parser_combinator)\n- [typescript typings](index.d.ts)\n\n[check out **passage** if you are looking for simple composable routing that builds on top of url-pattern](https://github.com/snd/passage)\n\n```\nnpm install url-pattern\n```\n\n```\nbower install url-pattern\n```\n\n```javascript\n> var UrlPattern = require('url-pattern');\n```\n\n``` javascript\n> var pattern = new UrlPattern('/v:major(.:minor)/*');\n\n> pattern.match('/v1.2/');\n{major: '1', minor: '2', _: ''}\n\n> pattern.match('/v2/users');\n{major: '2', _: 'users'}\n\n> pattern.match('/v/');\nnull\n```\n``` javascript\n> var pattern = new UrlPattern('(http(s)\\\\://)(:subdomain.):domain.:tld(\\\\::port)(/*)')\n\n> pattern.match('google.de');\n{domain: 'google', tld: 'de'}\n\n> pattern.match('https://www.google.com');\n{subdomain: 'www', domain: 'google', tld: 'com'}\n\n> pattern.match('http://mail.google.com/mail');\n{subdomain: 'mail', domain: 'google', tld: 'com', _: 'mail'}\n\n> pattern.match('http://mail.google.com:80/mail');\n{subdomain: 'mail', domain: 'google', tld: 'com', port: '80', _: 'mail'}\n\n> pattern.match('google');\nnull\n```\n\n## make pattern from string\n\n```javascript\n> var pattern = new UrlPattern('/api/users/:id');\n```\n\na `pattern` is immutable after construction.  \nnone of its methods changes its state.  \nthat makes it easier to reason about.\n\n## match pattern against string\n\nmatch returns the extracted segments:\n\n```javascript\n> pattern.match('/api/users/10');\n{id: '10'}\n```\n\nor `null` if there was no match:\n\n``` javascript\n> pattern.match('/api/products/5');\nnull\n```\n\npatterns are compiled into regexes which makes `.match()` superfast.\n\n## named segments\n\n`:id` (in the example above) is a named segment:\n\na named segment starts with `:` followed by the **name**.  \nthe **name** must be at least one character in the regex character set `a-zA-Z0-9`.\n\nwhen matching, a named segment consumes all characters in the regex character set\n`a-zA-Z0-9-_~ %`.\na named segment match stops at `/`, `.`, ... but not at `_`, `-`, ` `, `%`...\n\n[you can change these character sets. click here to see how.](#customize-the-pattern-syntax)\n\nif a named segment **name** occurs more than once in the pattern string,\nthen the multiple results are stored in an array on the returned object:\n\n```javascript\n> var pattern = new UrlPattern('/api/users/:ids/posts/:ids');\n> pattern.match('/api/users/10/posts/5');\n{ids: ['10', '5']}\n```\n\n## optional segments, wildcards and escaping\n\nto make part of a pattern optional just wrap it in `(` and `)`:\n\n```javascript\n> var pattern = new UrlPattern(\n  '(http(s)\\\\://)(:subdomain.):domain.:tld(/*)'\n);\n```\n\nnote that `\\\\` escapes the `:` in `http(s)\\\\://`.\nyou can use `\\\\` to escape `(`, `)`, `:` and `*` which have special meaning within\nurl-pattern.\n\noptional named segments are stored in the corresponding property only if they are present in the source string:\n\n```javascript\n> pattern.match('google.de');\n{domain: 'google', tld: 'de'}\n```\n\n```javascript\n> pattern.match('https://www.google.com');\n{subdomain: 'www', domain: 'google', tld: 'com'}\n```\n\n`*` in patterns are wildcards and match anything.\nwildcard matches are collected in the `_` property:\n\n```javascript\n> pattern.match('http://mail.google.com/mail');\n{subdomain: 'mail', domain: 'google', tld: 'com', _: 'mail'}\n```\n\nif there is only one wildcard then `_` contains the matching string.\notherwise `_` contains an array of matching strings.\n\n[look at the tests for additional examples of `.match`](test/match-fixtures.coffee)\n\n## make pattern from regex\n\n```javascript\n> var pattern = new UrlPattern(/^\\/api\\/(.*)$/);\n```\n\nif the pattern was created from a regex an array of the captured groups is returned on a match:\n\n```javascript\n> pattern.match('/api/users');\n['users']\n\n> pattern.match('/apiii/test');\nnull\n```\n\nwhen making a pattern from a regex\nyou can pass an array of keys as the second argument.\nreturns objects on match with each key mapped to a captured value:\n\n```javascript\n> var pattern = new UrlPattern(\n  /^\\/api\\/([^\\/]+)(?:\\/(\\d+))?$/,\n  ['resource', 'id']\n);\n\n> pattern.match('/api/users');\n{resource: 'users'}\n\n> pattern.match('/api/users/5');\n{resource: 'users', id: '5'}\n\n> pattern.match('/api/users/foo');\nnull\n```\n\n## stringify patterns\n\n```javascript\n> var pattern = new UrlPattern('/api/users/:id');\n\n> pattern.stringify({id: 10})\n'/api/users/10'\n```\n\noptional segments are only included in the output if they contain named segments\nand/or wildcards and values for those are provided:\n\n```javascript\n> var pattern = new UrlPattern('/api/users(/:id)');\n\n> pattern.stringify()\n'/api/users'\n\n> pattern.stringify({id: 10})\n'/api/users/10'\n```\n\nwildcards (key = `_`), deeply nested optional groups and multiple value arrays should stringify as expected.\n\nan error is thrown if a value that is not in an optional group is not provided.\n\nan error is thrown if an optional segment contains multiple\nparams and not all of them are provided.\n*one provided value for an optional segment\nmakes all values in that optional segment required.*\n\n[look at the tests for additional examples of `.stringify`](test/stringify-fixtures.coffee)\n\n## customize the pattern syntax\n\nfinally we can completely change pattern-parsing and regex-compilation to suit our needs:\n\n```javascript\n> var options = {};\n```\n\nlet's change the char used for escaping (default `\\\\`):\n\n```javascript\n> options.escapeChar = '!';\n```\n\nlet's change the char used to start a named segment (default `:`):\n\n```javascript\n> options.segmentNameStartChar = '$';\n```\n\nlet's change the set of chars allowed in named segment names (default `a-zA-Z0-9`)\nto also include `_` and `-`:\n\n```javascript\n> options.segmentNameCharset = 'a-zA-Z0-9_-';\n```\n\nlet's change the set of chars allowed in named segment values\n(default `a-zA-Z0-9-_~ %`) to not allow non-alphanumeric chars:\n\n```javascript\n> options.segmentValueCharset = 'a-zA-Z0-9';\n```\n\nlet's change the chars used to surround an optional segment (default `(` and `)`):\n\n```javascript\n> options.optionalSegmentStartChar = '[';\n> options.optionalSegmentEndChar = ']';\n```\n\nlet's change the char used to denote a wildcard (default `*`):\n\n```javascript\n> options.wildcardChar = '?';\n```\n\npass options as the second argument to the constructor:\n\n```javascript\n> var pattern = new UrlPattern(\n  '[http[s]!://][$sub_domain.]$domain.$toplevel-domain[/?]',\n  options\n);\n```\n\nthen match:\n\n```javascript\n> pattern.match('http://mail.google.com/mail');\n{\n  sub_domain: 'mail',\n  domain: 'google',\n  'toplevel-domain': 'com',\n  _: 'mail'\n}\n```\n\n## frequently asked questions\n\n### how do i match the query part of an URL ?\n\nthe query part of an URL has very different semantics than the rest.\nurl-pattern is not well suited for parsing the query part.\n\nthere are good existing libraries for parsing the query part of an URL.\nhttps://github.com/hapijs/qs is an example.\nin the interest of keeping things simple and focused\ni see no reason to add special support\nfor parsing the query part to url-pattern.\n\ni recommend splitting the URL at `?`, using url-pattern\nto parse the first part (scheme, host, port, path)\nand using https://github.com/hapijs/qs to parse the last part (query).\n\n### how do i match an IP ?\n\nyou can't exactly match IPs with url-pattern so you have to\nfall back to regexes and pass in a regex object.\n\n[here's how you do it](https://github.com/snd/url-pattern/blob/c8e0a943bb62e6feeca2d2595da4e22782e617ed/test/match-fixtures.coffee#L237)\n\n## [contributing](contributing.md)\n\n## [license: MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/snd/url-pattern.git"
  },
  "scripts": {
    "compile": "coffee --bare --compile --output lib src",
    "prepublish": "npm run compile",
    "pretest": "npm run compile",
    "test": "coffeetape test/*",
    "test-in-browsers": "zuul test/*",
    "test-with-coverage": "istanbul cover coffeetape test/* && cat ./coverage/coverage.json | ./node_modules/codecov.io/bin/codecov.io.js",
    "test-zuul-local": "zuul --local 8080 test/*"
  },
  "typings": "index.d.ts",
  "version": "1.0.3"
}
